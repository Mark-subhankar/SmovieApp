{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhankar\\\\Desktop\\\\React-Project\\\\moviehub\\\\src\\\\Component\\\\MovieList.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import \"../ComponentStyle/MovieListStyle.css\";\n// import Card from \"./Card\";\n// import InfiniteScroll from \"react-infinite-scroll-component\";\n\n// const MovieList = (props) => {\n//   const [movies, setMovies] = useState([]);\n//   const [page, setPage] = useState(1);\n//   const [totalPages, setTotalPages] = useState(0);\n//   const { category } = props;\n\n//   const fetchMovies = async () => {\n//     const apiKey = \"4eee0494b9dc4b3dd0c76812804c13c1\";\n//     const url = `https://api.themoviedb.org/3/movie/${category}?api_key=${apiKey}&language=en-US&page=${page}`;\n\n//     try {\n//       const response = await fetch(url);\n//       const data = await response.json();\n//       const { results, total_pages } = data;\n\n//       setMovies((prevMovies) => [...prevMovies, ...results]);\n//       setTotalPages(total_pages);\n//     } catch (error) {\n//       console.error(\"Error fetching movies:\", error);\n//     }\n//   };\n\n//   const fetchMoreMovies = () => {\n//     if (page < totalPages) {\n//       setPage(page + 1);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchMovies();\n//   }, [page]);\n\n//   return (\n//     <InfiniteScroll\n//       dataLength={movies.length}\n//       next={fetchMoreMovies}\n//       hasMore={page < totalPages}\n//     >\n//       <div className=\"movie__list\">\n//         <h2 className=\"list__title\">\n//           {\" \"}\n//           {(category ? category : \"POPULAR\").toUpperCase()}{\" \"}\n//         </h2>{\" \"}\n//         <div className=\"list__cards\">\n//           {\" \"}\n//           {movies.map((movie) => (\n//             <Card key=\"popular\" movie={movie} />\n//           ))}{\" \"}\n//         </div>{\" \"}\n//       </div>{\" \"}\n//     </InfiniteScroll>\n//   );\n// };\n\n// export default MovieList;\n\nimport React, { useEffect, useState } from \"react\";\nimport \"../ComponentStyle/MovieListStyle.css\";\nimport Card from \"./Card\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport LoadingBar from 'react-top-loading-bar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieList = props => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [loading, setLoading] = useState(false); // Add loading state\n  const {\n    category\n  } = props;\n  const fetchMovies = async () => {\n    setLoading(10); // Set loading to true before making the API call\n    const apiKey = \"4eee0494b9dc4b3dd0c76812804c13c1\";\n    const url = `https://api.themoviedb.org/3/movie/${category}?api_key=${apiKey}&language=en-US&page=${page}`;\n    try {\n      const response = await fetch(url);\n      setLoading(30); // Set loading to true before making the API call\n\n      const data = await response.json();\n      setLoading(70); // Set loading to true before making the API call\n\n      const {\n        results,\n        total_pages\n      } = data;\n      setMovies(prevMovies => [...prevMovies, ...results]);\n      setTotalPages(total_pages);\n    } catch (error) {\n      console.error(\"Error fetching movies:\", error);\n    } finally {\n      setLoading(100); // Set loading to false after the API call is completed\n    }\n  };\n\n  const fetchMoreMovies = () => {\n    if (page < totalPages) {\n      setPage(page + 1);\n    }\n  };\n  useEffect(() => {\n    fetchMovies();\n  }, [page]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(LoadingBar, {\n      progress: loading ? 50 : 0,\n      height: 3,\n      color: \"#f11946\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this), \" \", \" \", /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: movies.length,\n      next: fetchMoreMovies,\n      hasMore: page < totalPages,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie__list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"list__title\",\n          children: [\" \", (category ? category : \"POPULAR\").toUpperCase(), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"list__cards\",\n          children: [\" \", movies.map(movie => /*#__PURE__*/_jsxDEV(Card, {\n            movie: movie\n          }, \"popular\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 37\n          }, this)), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 14\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 66\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 14\n  }, this);\n};\n_s(MovieList, \"ukFZ93j6rpVR4WPUCwoJf1uJ9Vg=\");\n_c = MovieList;\nexport default MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useEffect","useState","Card","InfiniteScroll","LoadingBar","jsxDEV","_jsxDEV","MovieList","props","_s","movies","setMovies","page","setPage","totalPages","setTotalPages","loading","setLoading","category","fetchMovies","apiKey","url","response","fetch","data","json","results","total_pages","prevMovies","error","console","fetchMoreMovies","children","progress","height","color","fileName","_jsxFileName","lineNumber","columnNumber","dataLength","length","next","hasMore","className","toUpperCase","map","movie","_c","$RefreshReg$"],"sources":["C:/Users/subhankar/Desktop/React-Project/moviehub/src/Component/MovieList.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import \"../ComponentStyle/MovieListStyle.css\";\r\n// import Card from \"./Card\";\r\n// import InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\n// const MovieList = (props) => {\r\n//   const [movies, setMovies] = useState([]);\r\n//   const [page, setPage] = useState(1);\r\n//   const [totalPages, setTotalPages] = useState(0);\r\n//   const { category } = props;\r\n\r\n//   const fetchMovies = async () => {\r\n//     const apiKey = \"4eee0494b9dc4b3dd0c76812804c13c1\";\r\n//     const url = `https://api.themoviedb.org/3/movie/${category}?api_key=${apiKey}&language=en-US&page=${page}`;\r\n\r\n//     try {\r\n//       const response = await fetch(url);\r\n//       const data = await response.json();\r\n//       const { results, total_pages } = data;\r\n\r\n//       setMovies((prevMovies) => [...prevMovies, ...results]);\r\n//       setTotalPages(total_pages);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching movies:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchMoreMovies = () => {\r\n//     if (page < totalPages) {\r\n//       setPage(page + 1);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchMovies();\r\n//   }, [page]);\r\n\r\n//   return (\r\n//     <InfiniteScroll\r\n//       dataLength={movies.length}\r\n//       next={fetchMoreMovies}\r\n//       hasMore={page < totalPages}\r\n//     >\r\n//       <div className=\"movie__list\">\r\n//         <h2 className=\"list__title\">\r\n//           {\" \"}\r\n//           {(category ? category : \"POPULAR\").toUpperCase()}{\" \"}\r\n//         </h2>{\" \"}\r\n//         <div className=\"list__cards\">\r\n//           {\" \"}\r\n//           {movies.map((movie) => (\r\n//             <Card key=\"popular\" movie={movie} />\r\n//           ))}{\" \"}\r\n//         </div>{\" \"}\r\n//       </div>{\" \"}\r\n//     </InfiniteScroll>\r\n//   );\r\n// };\r\n\r\n// export default MovieList;\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"../ComponentStyle/MovieListStyle.css\";\r\nimport Card from \"./Card\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport LoadingBar from 'react-top-loading-bar';\r\n\r\nconst MovieList = (props) => {\r\n    const [movies, setMovies] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [loading, setLoading] = useState(false); // Add loading state\r\n    const { category } = props;\r\n\r\n    const fetchMovies = async() => {\r\n        setLoading(10); // Set loading to true before making the API call\r\n        const apiKey = \"4eee0494b9dc4b3dd0c76812804c13c1\";\r\n        const url = `https://api.themoviedb.org/3/movie/${category}?api_key=${apiKey}&language=en-US&page=${page}`;\r\n\r\n        try {\r\n            const response = await fetch(url);\r\n            setLoading(30); // Set loading to true before making the API call\r\n\r\n            const data = await response.json();\r\n            setLoading(70); // Set loading to true before making the API call\r\n\r\n            const { results, total_pages } = data;\r\n\r\n            setMovies((prevMovies) => [...prevMovies, ...results]);\r\n            setTotalPages(total_pages);\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n        } finally {\r\n            setLoading(100); // Set loading to false after the API call is completed\r\n        }\r\n    };\r\n\r\n    const fetchMoreMovies = () => {\r\n        if (page < totalPages) {\r\n            setPage(page + 1);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchMovies();\r\n    }, [page]);\r\n\r\n    return ( <\r\n        div >\r\n        <\r\n        LoadingBar progress = { loading ? 50 : 0 }\r\n        height = { 3 }\r\n        color = \"#f11946\" / > { /* Add LoadingBar component */ } <\r\n        InfiniteScroll dataLength = { movies.length }\r\n        next = { fetchMoreMovies }\r\n        hasMore = { page < totalPages } >\r\n        <\r\n        div className = \"movie__list\" >\r\n        <\r\n        h2 className = \"list__title\" > {\r\n            (category ? category : \"POPULAR\").toUpperCase() } <\r\n        /h2> <\r\n        div className = \"list__cards\" > {\r\n            movies.map((movie) => ( <\r\n                Card key = \"popular\"\r\n                movie = { movie }\r\n                />\r\n            ))\r\n        } <\r\n        /div> <\r\n        /div> <\r\n        /InfiniteScroll> <\r\n        /div>\r\n    );\r\n};\r\n\r\nexport default MovieList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}