{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\subhankar\\\\Desktop\\\\React-Project-MovieApp\\\\moviehub\\\\src\\\\Component\\\\MovieCategory.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import \"../ComponentStyle/MovieListStyle.css\";\n// import Card from \"./Card\";\n// import InfiniteScroll from \"react-infinite-scroll-component\";\n\n// const MovieCategory = (props) => {\n//   const [movies, setMovies] = useState([]);\n//   const [page, setPage] = useState(1);\n//   const [totalPages, setTotalPages] = useState(0);\n//   const { category, with_original_language } = props;\n\n//   const fetchMovies = async () => {\n//     const apiKey = \"4eee0494b9dc4b3dd0c76812804c13c1\";\n//     const url = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=en-US&sort_by=popularity.desc&page=1&with_original_language=${with_original_language}&page=${page}`;\n\n//     try {\n//       const response = await fetch(url);\n//       const data = await response.json();\n//       const { results, total_pages } = data;\n\n//       setMovies((prevMovies) => [...prevMovies, ...results]);\n//       setTotalPages(total_pages);\n//     } catch (error) {\n//       console.error(\"Error fetching movies:\", error);\n//     }\n//   };\n\n//   const fetchMoreMovies = () => {\n//     if (page < totalPages) {\n//       setPage(page + 1);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchMovies();\n//   }, [fetchMovies]);\n\n//   return (\n//     <InfiniteScroll\n//       dataLength={movies.length}\n//       next={fetchMoreMovies}\n//       hasMore={page < totalPages}\n//     >\n//       <div className=\"movie__list\">\n//         <h2 className=\"list__title\">\n//           {\" \"}\n//           {(category ? category : \"POPULAR\").toUpperCase()}{\" \"}\n//         </h2>{\" \"}\n//         <div className=\"list__cards\">\n//           {\" \"}\n//           {movies.map((movie) => (\n//             <Card key=\"popular\" movie={movie} />\n//           ))}{\" \"}\n//         </div>{\" \"}\n//       </div>{\" \"}\n//     </InfiniteScroll>\n//   );\n// };\n\n// export default MovieCategory;\n\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport \"../ComponentStyle/MovieListStyle.css\";\nimport Card from \"./Card\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieCategory = props => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const {\n    category,\n    with_original_language\n  } = props;\n  const fetchMovies = useCallback(async () => {\n    const apiKey = \"4eee0494b9dc4b3dd0c76812804c13c1\";\n    const url = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=en-US&sort_by=popularity.desc&page=1&with_original_language=${with_original_language}&page=${page}`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      const {\n        results,\n        total_pages\n      } = data;\n      setMovies(prevMovies => [...prevMovies, ...results]);\n      setTotalPages(total_pages);\n    } catch (error) {\n      console.error(\"Error fetching movies:\", error);\n    }\n  }, [page, with_original_language]);\n  const fetchMoreMovies = () => {\n    if (page < totalPages) {\n      setPage(page + 1);\n    }\n  };\n  useEffect(() => {\n    fetchMovies();\n  }, [fetchMovies]);\n  return /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n    dataLength: movies.length,\n    next: fetchMoreMovies,\n    hasMore: page < totalPages,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie__list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"list__title\",\n        children: [\" \", (category ? category : \"POPULAR\").toUpperCase(), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list__cards\",\n        children: [\" \", movies.map(movie => /*#__PURE__*/_jsxDEV(Card, {\n          movie: movie\n        }, \"popular\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 37\n        }, this)), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 14\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 14\n  }, this);\n};\n_s(MovieCategory, \"kSTdbsqEg3HM90NwhJxOzCW5reM=\");\n_c = MovieCategory;\nexport default MovieCategory;\nvar _c;\n$RefreshReg$(_c, \"MovieCategory\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","Card","InfiniteScroll","jsxDEV","_jsxDEV","MovieCategory","props","_s","movies","setMovies","page","setPage","totalPages","setTotalPages","category","with_original_language","fetchMovies","apiKey","url","response","fetch","data","json","results","total_pages","prevMovies","error","console","fetchMoreMovies","dataLength","length","next","hasMore","children","className","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","map","movie","_c","$RefreshReg$"],"sources":["C:/Users/subhankar/Desktop/React-Project-MovieApp/moviehub/src/Component/MovieCategory.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import \"../ComponentStyle/MovieListStyle.css\";\r\n// import Card from \"./Card\";\r\n// import InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\n// const MovieCategory = (props) => {\r\n//   const [movies, setMovies] = useState([]);\r\n//   const [page, setPage] = useState(1);\r\n//   const [totalPages, setTotalPages] = useState(0);\r\n//   const { category, with_original_language } = props;\r\n\r\n//   const fetchMovies = async () => {\r\n//     const apiKey = \"4eee0494b9dc4b3dd0c76812804c13c1\";\r\n//     const url = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=en-US&sort_by=popularity.desc&page=1&with_original_language=${with_original_language}&page=${page}`;\r\n\r\n//     try {\r\n//       const response = await fetch(url);\r\n//       const data = await response.json();\r\n//       const { results, total_pages } = data;\r\n\r\n//       setMovies((prevMovies) => [...prevMovies, ...results]);\r\n//       setTotalPages(total_pages);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching movies:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const fetchMoreMovies = () => {\r\n//     if (page < totalPages) {\r\n//       setPage(page + 1);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchMovies();\r\n//   }, [fetchMovies]);\r\n\r\n//   return (\r\n//     <InfiniteScroll\r\n//       dataLength={movies.length}\r\n//       next={fetchMoreMovies}\r\n//       hasMore={page < totalPages}\r\n//     >\r\n//       <div className=\"movie__list\">\r\n//         <h2 className=\"list__title\">\r\n//           {\" \"}\r\n//           {(category ? category : \"POPULAR\").toUpperCase()}{\" \"}\r\n//         </h2>{\" \"}\r\n//         <div className=\"list__cards\">\r\n//           {\" \"}\r\n//           {movies.map((movie) => (\r\n//             <Card key=\"popular\" movie={movie} />\r\n//           ))}{\" \"}\r\n//         </div>{\" \"}\r\n//       </div>{\" \"}\r\n//     </InfiniteScroll>\r\n//   );\r\n// };\r\n\r\n// export default MovieCategory;\r\n\r\n\r\n\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport \"../ComponentStyle/MovieListStyle.css\";\r\nimport Card from \"./Card\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nconst MovieCategory = (props) => {\r\n    const [movies, setMovies] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const { category, with_original_language } = props;\r\n\r\n    const fetchMovies = useCallback(async() => {\r\n        const apiKey = \"4eee0494b9dc4b3dd0c76812804c13c1\";\r\n        const url = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=en-US&sort_by=popularity.desc&page=1&with_original_language=${with_original_language}&page=${page}`;\r\n\r\n        try {\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            const { results, total_pages } = data;\r\n\r\n            setMovies((prevMovies) => [...prevMovies, ...results]);\r\n            setTotalPages(total_pages);\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n        }\r\n    }, [page, with_original_language]);\r\n\r\n    const fetchMoreMovies = () => {\r\n        if (page < totalPages) {\r\n            setPage(page + 1);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchMovies();\r\n    }, [fetchMovies]);\r\n\r\n    return ( <\r\n        InfiniteScroll dataLength = { movies.length }\r\n        next = { fetchMoreMovies }\r\n        hasMore = { page < totalPages } >\r\n        <\r\n        div className = \"movie__list\" >\r\n        <\r\n        h2 className = \"list__title\" > {\r\n            (category ? category : \"POPULAR\").toUpperCase() } <\r\n        /h2> <\r\n        div className = \"list__cards\" > {\r\n            movies.map((movie) => ( <\r\n                Card key = \"popular\"\r\n                movie = { movie }\r\n                />\r\n            ))\r\n        } <\r\n        /div> <\r\n        /div> <\r\n        /InfiniteScroll>\r\n    );\r\n};\r\n\r\nexport default MovieCategory;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}