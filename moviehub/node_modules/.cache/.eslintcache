[{"C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\index.js":"1","C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\App.js":"2","C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\reportWebVitals.js":"3","C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\MovieList.js":"4","C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\Navbar.js":"5","C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\MovieCategory.js":"6","C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\MovieSuperlist.js":"7","C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\Home.js":"8","C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\MovieDetails.js":"9","C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\MovieSublist.js":"10","C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\Card.js":"11","C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\Switch.js":"12"},{"size":535,"mtime":1689052103342,"results":"13","hashOfConfig":"14"},{"size":5036,"mtime":1693591419190,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1689052103910,"results":"16","hashOfConfig":"14"},{"size":2755,"mtime":1691135621371,"results":"17","hashOfConfig":"14"},{"size":6030,"mtime":1691154765868,"results":"18","hashOfConfig":"14"},{"size":2095,"mtime":1691135265522,"results":"19","hashOfConfig":"14"},{"size":2922,"mtime":1691135616425,"results":"20","hashOfConfig":"14"},{"size":2489,"mtime":1691154652699,"results":"21","hashOfConfig":"14"},{"size":7016,"mtime":1693591421952,"results":"22","hashOfConfig":"14"},{"size":2826,"mtime":1691135619066,"results":"23","hashOfConfig":"14"},{"size":2264,"mtime":1691135259370,"results":"24","hashOfConfig":"14"},{"size":843,"mtime":1691153604472,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fmszbj",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":2,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\index.js",[],[],"C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\App.js",[],[],"C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\reportWebVitals.js",[],[],"C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\MovieList.js",["66","67"],[],"import React, { useEffect, useState } from \"react\";\r\nimport \"../ComponentStyle/MovieListStyle.css\";\r\nimport Card from \"./Card\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport LoadingBar from \"react-top-loading-bar\";\r\n\r\nconst MovieList = (props) => {\r\n    const [movies, setMovies] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [loading, setLoading] = useState(false); // Add loading state\r\n    const [progress, setProgress] = useState(0); // Add progress state\r\n    const { category } = props;\r\n\r\n    const fetchMovies = async() => {\r\n        setLoading(true); // Set loading to true before making the API call\r\n        setProgress(30); // Set an initial progress value\r\n\r\n        const apiKey = \"4eee0494b9dc4b3dd0c76812804c13c1\";\r\n        const url = `https://api.themoviedb.org/3/movie/${category}?api_key=${apiKey}&language=en-US&page=${page}`;\r\n\r\n        try {\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            const { results, total_pages } = data;\r\n            setMovies((prevMovies) => [...prevMovies, ...results]);\r\n            setTotalPages(total_pages);\r\n            setProgress(100); // Set the progress to 100 when the API call is successful\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n        } finally {\r\n            setTimeout(() => {\r\n                setLoading(false); // Set loading to false after a short delay\r\n                setProgress(0); // Reset the progress value\r\n            }, 500); // Adjust the delay duration if needed\r\n        }\r\n    };\r\n\r\n    const fetchMoreMovies = () => {\r\n        if (page < totalPages) {\r\n            setPage(page + 1);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchMovies();\r\n    }, [page]);\r\n\r\n    return ( <\r\n        div >\r\n        <\r\n        LoadingBar progress = { progress }\r\n        height = { 3 }\r\n        color = \"#f11946\" / > { \" \" } { /* Use the progress state */ } { \" \" } <\r\n        InfiniteScroll dataLength = { movies.length }\r\n        next = { fetchMoreMovies }\r\n        hasMore = { page < totalPages } >\r\n        <\r\n        div className = \"movie__list\" >\r\n        <\r\n        h2 className = \"list__title\" > { \" \" } {\r\n            (category ? category : \"POPULAR\").toUpperCase() } { \" \" } <\r\n        /h2>{\" \"} <\r\n        div className = \"list__cards\" > { \" \" } {\r\n            movies.map((movie) => ( <\r\n                Card key = \"popular\"\r\n                movie = { movie }\r\n                />\r\n            ))\r\n        } { \" \" } <\r\n        /div>{\" \"} <\r\n        /div>{\" \"} <\r\n        /InfiniteScroll>{\" \"} <\r\n        /div>\r\n    );\r\n};\r\n\r\nexport default MovieList;","C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\Navbar.js",[],[],"C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\MovieCategory.js",[],[],"C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\MovieSuperlist.js",["68","69"],[],"import React, { useEffect, useState } from \"react\";\r\nimport \"../ComponentStyle/MovieListStyle.css\";\r\nimport Card from \"./Card\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport LoadingBar from \"react-top-loading-bar\";\r\n\r\nconst MovieSuperlist = (props) => {\r\n    const [movies, setMovies] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const { category, with_original_language, with_genres } = props;\r\n    const [loading, setLoading] = useState(false); // Add loading state\r\n    const [progress, setProgress] = useState(0); // Add progress state\r\n\r\n    const fetchMovies = async() => {\r\n        setLoading(true); // Set loading to true before making the API call\r\n        setProgress(30); // Set an initial progress value\r\n\r\n        const apiKey = \"4eee0494b9dc4b3dd0c76812804c13c1\";\r\n        const url = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=hi&sort_by=popularity.desc&with_original_language=${with_original_language}&with_genres=${with_genres}&page=${page}`;\r\n\r\n        try {\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            const { results, total_pages } = data;\r\n\r\n            setMovies((prevMovies) => [...prevMovies, ...results]);\r\n            setTotalPages(total_pages);\r\n            setProgress(100); // Set the progress to 100 when the API call is successful\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n        } finally {\r\n            setTimeout(() => {\r\n                setLoading(false); // Set loading to false after a short delay\r\n                setProgress(0); // Reset the progress value\r\n            }, 500); // Adjust the delay duration if needed\r\n        }\r\n    };\r\n\r\n    const fetchMoreMovies = () => {\r\n        if (page < totalPages) {\r\n            setPage(page + 1);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchMovies();\r\n    }, [page, with_original_language]);\r\n\r\n    return ( <\r\n        div >\r\n        <\r\n        LoadingBar progress = { progress }\r\n        height = { 3 }\r\n        color = \"#f11946\" / > { \" \" } { /* Use the progress state */ } { \" \" } <\r\n        InfiniteScroll dataLength = { movies.length }\r\n        next = { fetchMoreMovies }\r\n        hasMore = { page < totalPages } >\r\n        <\r\n        div className = \"movie__list\" >\r\n        <\r\n        h2 className = \"list__title\" > { \" \" } {\r\n            (category ? category : \"POPULAR\").toUpperCase() } { \" \" } <\r\n        /h2>{\" \"} <\r\n        div className = \"list__cards\" > { \" \" } {\r\n            movies.map((movie) => ( <\r\n                Card key = \"popular\"\r\n                movie = { movie }\r\n                />\r\n            ))\r\n        } { \" \" } <\r\n        /div>{\" \"} <\r\n        /div>{\" \"} <\r\n        /InfiniteScroll>{\" \"} <\r\n        /div>\r\n    );\r\n};\r\n\r\nexport default MovieSuperlist;","C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\Home.js",[],[],"C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\MovieDetails.js",["70","71","72","73","74","75","76"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"../ComponentStyle/MovieDetailStyle.css\";\r\nimport LoadingBar from \"react-top-loading-bar\";\r\n\r\nconst MovieDetails = () => {\r\n    const [currentMovieDetail, setMovie] = useState();\r\n    const { id } = useParams();\r\n    const [loading, setLoading] = useState(false); // Add loading state\r\n    const [progress, setProgress] = useState(0); // Add progress state\r\n\r\n    useEffect(() => {\r\n        getData();\r\n        window.scrollTo(0, 0);\r\n    }, []);\r\n\r\n    const getData = () => {\r\n        setLoading(true); // Set loading to true before making the API call\r\n        setProgress(30); // Set an initial progress value\r\n        try {\r\n            fetch(\r\n                    `https://api.themoviedb.org/3/movie/${id}?api_key=4eee0494b9dc4b3dd0c76812804c13c1&language=en-US`\r\n                )\r\n                .then((res) => res.json())\r\n                .then((data) => setMovie(data));\r\n            setProgress(100); // Set the progress to 100 when the API call is successful\r\n        } finally {\r\n            setTimeout(() => {\r\n                setLoading(false); // Set loading to false after a short delay\r\n                setProgress(0); // Reset the progress value\r\n            }, 500); // Adjust the delay duration if needed\r\n        }\r\n    };\r\n\r\n    return ( <\r\n        div >\r\n        <\r\n        LoadingBar progress = { progress }\r\n        height = { 3 }\r\n        color = \"#f11946\" / > { \" \" } <\r\n        div className = \"movie\" >\r\n        <\r\n        div className = \"movie__intro\" >\r\n        <\r\n        img className = \"movie__backdrop\"\r\n        src = { `https://image.tmdb.org/t/p/original${\r\n              currentMovieDetail ? currentMovieDetail.backdrop_path : \"\"\r\n            }` }\r\n        />{\" \"} <\r\n        /div>{\" \"} <\r\n        div className = \"movie__posterBox\" > < /div>{\" \"} <\r\n        div className = \"movie__detail\" >\r\n        <\r\n        div className = \"movie__detailLeft\" > < /div>{\" \"} <\r\n        div className = \"movie__detailRight\" >\r\n        <\r\n        div className = \"movie__detailRightTop\" >\r\n        <\r\n        div className = \"movie__name\" > { \" \" } {\r\n            currentMovieDetail\r\n                ?\r\n                currentMovieDetail.original_title :\r\n                \"\"\r\n        } { \" \" } <\r\n        /div>{\" \"} <\r\n        div className = \"movie__tagline\" > { \" \" } { currentMovieDetail ? currentMovieDetail.tagline : \"\" } { \" \" } <\r\n        /div>{\" \"} <\r\n        div className = \"movie__rating\" > { \" \" } { currentMovieDetail ? currentMovieDetail.vote_average : \"\" } { \" \" } <\r\n        i class = \"fas fa-star\" / >\r\n        <\r\n        span className = \"movie__voteCount\" > { \" \" } {\r\n            currentMovieDetail\r\n                ?\r\n                \"(\" + currentMovieDetail.vote_count + \") votes\" :\r\n                \"\"\r\n        } { \" \" } <\r\n        /span>{\" \"} <\r\n        /div>{\" \"} <\r\n        div className = \"movie__runtime\" > { \" \" } {\r\n            currentMovieDetail\r\n                ?\r\n                currentMovieDetail.runtime + \" mins\" :\r\n                \"\"\r\n        } { \" \" } <\r\n        /div>{\" \"} <\r\n        div className = \"movie__releaseDate\" > { \" \" } {\r\n            currentMovieDetail\r\n                ?\r\n                \"Release date: \" + currentMovieDetail.release_date :\r\n                \"\"\r\n        } { \" \" } <\r\n        /div>{\" \"} <\r\n        /div>{\" \"} <\r\n        div className = \"movie__detailRightBottom\" >\r\n        <\r\n        div className = \"synopsisText\" > Synopsis < /div>{\" \"} <\r\n        div > { \" \" } { currentMovieDetail ? currentMovieDetail.overview : \"\" } { \" \" } <\r\n        /div>{\" \"} <\r\n        /div>{\" \"} <\r\n        /div>{\" \"} <\r\n        /div>{\" \"} <\r\n        div className = \"movie__links\" >\r\n        <\r\n        div className = \"movie__heading\" > { \" \" } <\r\n        span > Useful Links < /span>{\" \"} <\r\n        /div>{\" \"} {\r\n            currentMovieDetail && currentMovieDetail.homepage && ( <\r\n                a href = { currentMovieDetail.homepage }\r\n                target = \"_blank\"\r\n                style = {\r\n                    { textDecoration: \"none\" } } >\r\n                { \" \" } <\r\n                p > { \" \" } <\r\n                span id = \"text\"\r\n                className = \"movie__homeButton movie__Button\" > { \" \" }\r\n                Homepage < i className = \"newTab fas fa-external-link-alt\" > { \" \" } <\r\n                /i>{\" \"} <\r\n                /span>{\" \"} <\r\n                /p>{\" \"} <\r\n                /a>\r\n            )\r\n        } { \" \" } {\r\n            currentMovieDetail && currentMovieDetail.imdb_id && ( <\r\n                a href = { \"https://www.imdb.com/title/\" + currentMovieDetail.imdb_id }\r\n                target = \"_blank\"\r\n                style = {\r\n                    { textDecoration: \"none\" } } >\r\n                { \" \" } <\r\n                p > { \" \" } <\r\n                span id = \"text\"\r\n                className = \"movie__imdbButton movie__Button\" > { \" \" }\r\n                IMDb < i className = \"newTab fas fa-external-link-alt\" > < /i>{\" \"} <\r\n                /span>{\" \"} <\r\n                /p>{\" \"} <\r\n                /a>\r\n            )\r\n        } { \" \" } <\r\n        /div>{\" \"} <\r\n        div className = \"movie__genres\" > { \" \" } {\r\n            currentMovieDetail && currentMovieDetail.genres ?\r\n                currentMovieDetail.genres.map((genre) => ( <\r\n                    > { \" \" } <\r\n                    span className = \"movie__genre\"\r\n                    id = { genre.id } > { \" \" } { genre.name } { \" \" } <\r\n                    /span>{\" \"} <\r\n                    />\r\n                )) :\r\n                \"\"\r\n        } { \" \" } <\r\n        /div>{\" \"} <\r\n        img className = \"movie__poster\"\r\n        src = { `https://image.tmdb.org/t/p/original${\r\n            currentMovieDetail ? currentMovieDetail.poster_path : \"\"\r\n          }` }\r\n        />{\" \"} <\r\n        div className = \"movie__heading\" > Production companies < /div>{\" \"} <\r\n        div className = \"movie__production\" > { \" \" } {\r\n            currentMovieDetail &&\r\n                currentMovieDetail.production_companies &&\r\n                currentMovieDetail.production_companies.map((company) => ( <\r\n                    > { \" \" } {\r\n                        company.logo_path && ( <\r\n                            span className = \"productionCompanyImage\" >\r\n                            <\r\n                            img className = \"movie__productionComapany\"\r\n                            src = {\r\n                                \"https://image.tmdb.org/t/p/original\" +\r\n                                company.logo_path\r\n                            }\r\n                            />{\" \"} <\r\n                            span > { company.name } < /span>{\" \"} <\r\n                            /span>\r\n                        )\r\n                    } { \" \" } <\r\n                    />\r\n                ))\r\n        } { \" \" } <\r\n        /div>{\" \"} <\r\n        /div>{\" \"} <\r\n        /div>\r\n    );\r\n};\r\n\r\nexport default MovieDetails;","C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\MovieSublist.js",["77","78"],[],"import React, { useEffect, useState } from \"react\";\r\nimport \"../ComponentStyle/MovieListStyle.css\";\r\nimport Card from \"./Card\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport LoadingBar from \"react-top-loading-bar\";\r\n\r\nconst MovieSublist = (props) => {\r\n    const [movies, setMovies] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const { category, with_genres } = props;\r\n    const [loading, setLoading] = useState(false); // Add loading state\r\n    const [progress, setProgress] = useState(0); // Add progress state\r\n\r\n    const fetchMovies = async() => {\r\n        setLoading(true); // Set loading to true before making the API call\r\n        setProgress(30); // Set an initial progress value\r\n\r\n        const apiKey = \"4eee0494b9dc4b3dd0c76812804c13c1\";\r\n\r\n        const url = `https://api.themoviedb.org/3/discover/movie?api_key=${apiKey}&language=en-US&sort_by=popularity.desc&with_genres=${with_genres}&page=${page}`;\r\n\r\n        try {\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            const { results, total_pages } = data;\r\n\r\n            setMovies((prevMovies) => [...prevMovies, ...results]);\r\n            setTotalPages(total_pages);\r\n            setProgress(100); // Set the progress to 100 when the API call is successful\r\n        } catch (error) {\r\n            console.error(\"Error fetching movies:\", error);\r\n        } finally {\r\n            setTimeout(() => {\r\n                setLoading(false); // Set loading to false after a short delay\r\n                setProgress(0); // Reset the progress value\r\n            }, 500); // Adjust the delay duration if needed\r\n        }\r\n    };\r\n\r\n    const fetchMoreMovies = () => {\r\n        if (page < totalPages) {\r\n            setPage(page + 1);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchMovies();\r\n    }, [page]);\r\n\r\n    return ( <\r\n        div >\r\n        <\r\n        LoadingBar progress = { progress }\r\n        height = { 3 }\r\n        color = \"#f11946\" / > { \" \" } { /* Use the progress state */ } { \" \" } <\r\n        InfiniteScroll dataLength = { movies.length }\r\n        next = { fetchMoreMovies }\r\n        hasMore = { page < totalPages } >\r\n        <\r\n        div className = \"movie__list\" >\r\n        <\r\n        h2 className = \"list__title\" > { \" \" } {\r\n            (category ? category : \"POPULAR\").toUpperCase() } { \" \" } <\r\n        /h2>{\" \"} <\r\n        div className = \"list__cards\" > { \" \" } {\r\n            movies.map((movie) => ( <\r\n                Card key = \"popular\"\r\n                movie = { movie }\r\n                />\r\n            ))\r\n        } { \" \" } <\r\n        /div>{\" \"} <\r\n        /div>{\" \"} <\r\n        /InfiniteScroll>{\" \"} <\r\n        /div>\r\n    );\r\n};\r\n\r\nexport default MovieSublist;","C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\Card.js",[],[],"C:\\Users\\subhankar\\Desktop\\React-Project-MovieApp\\moviehub\\src\\Component\\Switch.js",[],[],{"ruleId":"79","severity":1,"message":"80","line":11,"column":12,"nodeType":"81","messageId":"82","endLine":11,"endColumn":19},{"ruleId":"83","severity":1,"message":"84","line":47,"column":8,"nodeType":"85","endLine":47,"endColumn":14,"suggestions":"86"},{"ruleId":"79","severity":1,"message":"80","line":12,"column":12,"nodeType":"81","messageId":"82","endLine":12,"endColumn":19},{"ruleId":"83","severity":1,"message":"84","line":48,"column":8,"nodeType":"85","endLine":48,"endColumn":38,"suggestions":"87"},{"ruleId":"79","severity":1,"message":"80","line":9,"column":12,"nodeType":"81","messageId":"82","endLine":9,"endColumn":19},{"ruleId":"83","severity":1,"message":"88","line":15,"column":8,"nodeType":"85","endLine":15,"endColumn":10,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":44,"column":9,"nodeType":"92","endLine":49,"endColumn":11},{"ruleId":"93","severity":1,"message":"94","line":107,"column":68,"nodeType":"92","messageId":"95","endLine":111,"endColumn":51,"fix":"96"},{"ruleId":"93","severity":1,"message":"94","line":123,"column":67,"nodeType":"92","messageId":"95","endLine":127,"endColumn":51,"fix":"97"},{"ruleId":"90","severity":1,"message":"91","line":150,"column":20,"nodeType":"92","endLine":155,"endColumn":11},{"ruleId":"90","severity":1,"message":"91","line":164,"column":29,"nodeType":"92","endLine":170,"endColumn":31},{"ruleId":"79","severity":1,"message":"80","line":12,"column":12,"nodeType":"81","messageId":"82","endLine":12,"endColumn":19},{"ruleId":"83","severity":1,"message":"84","line":49,"column":8,"nodeType":"85","endLine":49,"endColumn":14,"suggestions":"98"},"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMovies'. Either include it or remove the dependency array.","ArrayExpression",["99"],["100"],"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["101"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"102","text":"103"},{"range":"104","text":"103"},["105"],{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},[4137,4137]," rel=\"noreferrer\"",[4806,4806],{"desc":"106","fix":"112"},"Update the dependencies array to be: [fetchMovies, page]",{"range":"113","text":"114"},"Update the dependencies array to be: [fetchMovies, page, with_original_language]",{"range":"115","text":"116"},"Update the dependencies array to be: [getData]",{"range":"117","text":"118"},{"range":"119","text":"114"},[1859,1865],"[fetchMovies, page]",[1997,2027],"[fetchMovies, page, with_original_language]",[549,551],"[getData]",[1927,1933]]